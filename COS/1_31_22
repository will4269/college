arrays only hold one type and of any length

int[] arrayOfInts= new int[5];
new instantiates the object int
5 times

arrayOfInts.length = 5 (0-4) indices

cannot slice
cannot use in (x in y == true)
can't use in loops for( i in x)
.add() or .remove()

//contiguous, common border

arrays go in the heap for they need more overhead

java has ArrayList

ArrayList<integer> somelistname = new ArrayList<integer>(); //will contain integers but without <integer> will run
//<integer> is called generic and a java only ish concept and precompiler directive


ArrayList<object> somelistname = new ArrayList<object>();
will not remember class when reading so must be casted adequetley.
ArrayList
.add()
.remove(index) delete index
.remove(object) delete first instance
.size()
.indexOf(object) returns the index
.get(index) extract and item
.sort()

arraylist.indexof(object) will give -1 if not in index

inputs by scanner class

input buffer, waits for input and reads busses. and reads by type

Scanner myScanner = new Scanner(System.in);

String SomeWord;
.System.out.println("Enter some text");
someWork= myScanner.nextline();
nextline() //strings
nextInt() //int
nextDouble() //doubles
nextFloat() //float
nextBoolean() //boolean

scanner is also for file input

Scanner fileScanner = new Scanner(new File("Sometxt.txt"));
